#26
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return len(nums)
        else:
            i = 1
            newLength = 1
            while i < len(nums):
                if nums[i] != nums[i-1]:
                    newLength+=1
                    nums[newLength-1] = nums[i]
                i+=1;
            return newLength
#122
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) == 0:
            return 0
        else:
            profit = 0
            buy_index = 0
            curr_index = 1
            while curr_index < len(prices):
                if prices[curr_index] < prices[curr_index-1]:
                    profit += prices[curr_index-1] - prices[buy_index]
                    buy_index = curr_index
                curr_index += 1;
            if prices[curr_index-1] > prices[buy_index]:
                profit += prices[curr_index-1] - prices[buy_index]
            return profit
#189
# Python list [a:b) includes a but does not include b
# O(1) space complexity
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k = k%len(nums)
        count = 0
        index_initial = 0
        while count < len(nums):
            i = index_initial 
            curr = nums[i]
            while True:
                j = (i+k)%len(nums)
                nums[j],curr = curr,nums[j]
                i = j
                count += 1
                if j == index_initial:
                    index_initial += 1  
                    break
#217
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        # use set
        element = set()
        for i in range(len(nums)):
            if nums[i] in element:
                return True
            else:
                element.add(nums[i])
        return False
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        # use dictionary
        element = dict()
        for i in nums:
            if i in element:  #if element.get(i):
                return True
            else:
                element[i] = 1
        return False
#136
class Solution: # 1 count in dict, need extra space
    def singleNumber(self, nums: List[int]) -> int:
        element = dict()
        for i in nums:
            if i in element:
                element[i] += 1
            else:
                element[i] = 1
        for j in element.keys():
            if element[j] == 1:
                return j
class Solution: # 2 quick sort (not linear, O(nlogn)) then compare
    def singleNumber(self, nums: List[int]) -> int:
        nums.sort()
        for i in range(int(len(nums)/2)):
            if nums[2*i] != nums[2*i+1]:
                return nums[2*i]
        return nums[-1]
class Solution: # 3 bitwise XOR, x ^ y, time O(n)
    def singleNumber(self, nums: List[int]) -> int:
        ans = nums[0]
        if len(nums) > 1:
            for i in range(1,len(nums)):
                ans = ans ^ nums[i]
        return ans
#350        
class Solution: # quick sort (internal) and double indices
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        nums1.sort()
        nums2.sort()
        i = 0
        j = 0
        ans = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                ans.append(nums2[j])
                i += 1
                j += 1
            elif nums1[i] > nums2[j]:
                j += 1
            else:
                i += 1
        return ans
# 2 if nums1 << nums2, use dict() to store count and then search in the other
# 3 if not enough spaces to store the whole data, use merge sort (external sort)
